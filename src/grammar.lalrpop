use crate::ast;
use crate::lexer::{LexicalError, Token};
use either::Either::{self,Left,Right};

grammar<'input>(input: &'input str, hadron_name: &'input str);

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
                    v.push(e);
                    v
    }
};

Boxed<T>: Box<T> = {
    <t:T> => Box::new(t)
}

 Bar<T>: Vec<T> = {
    <mut v:(<T> "|")*> <e:T> => {
                    v.push(e);
                    v
    }
};

pub Hadron: ast::HadronDef = {
    <uses:UseDef+>
    <defs:Definition+>  =>

    ast::HadronDef{name: hadron_name.to_owned(), uses: uses, defs: defs }

}

UseDef: ast::UseDef = {
    "use" <id: Identifier> <names:( "{" <Comma<SYMBOL>> "}" )?> =>
        ast::UseDef{module_name: id, names: names}
}

pub Definition: ast::Definition = {
    <f:FlavorDef> => ast::Definition::F(f),
    <q:QuarkDef> => ast::Definition::Q(q),
    <b:BosonDef> => ast::Definition::B(b)
}

FlavorDef: ast::FlavorDef = {
    "flavor" <tps:TypeParamBlock?> <name:SYMBOL> <cs:ComposesBlock?> "is"
    <chs:ChannelDecl*>
    "end" ("@flavor")? =>
    ast::FlavorDef{name: name,
        type_params: tps,
        composes: cs,
        channels: chs}
}

ArgumentList: Vec<ast::Expr> = {
    Comma<Expr>,
    => Vec::new()
}

QuarkDef: ast::QuarkDef = {
    "quark" <tps:TypeParamBlock?> <name:SYMBOL> <params:ValueParamBlock>
      <ps:ProvidesBlock>  "is"
      <channels:ChannelDecl*>
      <slots:SlotDecl*>
      <behaviors:BehaviorDecl*>
      "adopt" <beh:SYMBOL> "("<es:ArgumentList>")"
      "end" ("@quark")?   =>
      ast::QuarkDef {
        name: name,
        type_params: tps,
        params: params,
        provides: ps,
        slots: slots,
        behaviors: behaviors,
        channels: channels,
        initial: (beh.to_string(), es)
      }

}

BosonDef: ast::BosonDef = {
   "boson" <tps: TypeParamBlock?> <name:SYMBOL> "is"
      <options: Bar<BosonOptionDecl>>
   "end" ("@boson")? =>

   ast::BosonDef{name: name, type_params: tps, options: options}
}

BosonOptionDecl: ast::BosonOptionDecl = {
	<name:SYMBOL> <params:BosonParamsSpec> =>
    match params {
        ast::TempBosonParam::T(spec) => ast::BosonOptionDecl::TupleOptionDecl{name: name, values: spec},
        ast::TempBosonParam::S(spec) => ast::BosonOptionDecl::StructOptionDecl{name: name, values: spec}
    }
}

BosonParamsSpec: ast::TempBosonParam = {
    "("  <ts:Comma<Type>?> ")" =>
            match ts {
                Some(types) => ast::TempBosonParam::T(types),
                None => ast::TempBosonParam::T(Vec::new())
            },
    "{" <vs:Comma<ValueParamSpec>>"}" => ast::TempBosonParam::S(vs)
}



ChannelDecl: ast::ChannelDecl = {
    "chan" <name:SYMBOL> ":" <dir:Direction> <t:Type> =>
    ast::ChannelDecl{
        name: name,
        channel_type: ast::ChannelType{direction:dir, value_type: t}}
}

Direction: ast::Direction = {
    "In" => ast::Direction::In,
    "Out" => ast::Direction::Out,
    "Both" => ast::Direction::Both,
     => ast::Direction::Both
}

SlotDecl: ast::SlotDecl = {
    "slot" <s:SYMBOL> ":" <t:Type> "=" <e:Expr> =>

    ast::SlotDecl{ name: s, value_type: t, init_value: e}
}

ProvidesBlock: Vec<ast::Type> = {
    "provides" <Comma<Type>>,
    => Vec::new()

}

ComposesBlock: Vec<ast::Type> = {
    "("  <Comma<Type>>  ")"
}

TypeParamBlock: Vec<ast::TypeParamSpec> = {
    <Comma<TypeParamSpec>>
}

TypeParamSpec: ast::TypeParamSpec = {
    <t:TYPEVAR> <constraint:(":" <Type>)?> =>

    ast::TypeParamSpec{name: ast::TypeVar(t), constraint: constraint}
}

ValueParamBlock: Vec<ast::ValueParamSpec> = {
    "("  <pars:Comma<ValueParamSpec>?> ")" =>
    match pars {
        Some(params) => params,
        None => Vec::new()
    }
}

ValueParamSpec: ast::ValueParamSpec = {
    <name:SYMBOL> ":" <t:Type>  =>

    ast::ValueParamSpec{name: name, value_type: t}
}

BehaviorDecl: ast::BehaviorDecl = {
    "behavior" <s:SYMBOL> <ps:ValueParamBlock?> "is"
        <body:Action+>
        "end" ("@behavior")? =>

        ast::BehaviorDecl{ name: s, params: ps, actions: body}
}


Identifier: ast::Identifier = {
 <mut syms:(<SYMBOL> "::")*> <s:SYMBOL> => {
                    syms.push(s);
                    syms
    }
}

//////////// Actions

Action: Box<ast::Action> = {
    "par" "{" <acts:Action+> "}" => Box::new(ast::Action::Par(acts)),
    "seq" "{" <acts:Action+> "}" => Box::new(ast::Action::Seq(acts)),
    "select" "{" <acts:Action+> "}"  => Box::new(ast::Action::Select(acts)),
    "send" <ch:ChannelExpr> "(" <e:Expr> ")" => Box::new(ast::Action::Send{ target: ch, value: e}),
    <ReceiveAction>,
    <lval:SYMBOL> ":=" <e:Expr> => Box::new(ast::Action::Assign{target: lval, value: e}),
    "var" <s:SYMBOL> ":" <t:Type> "=" <e:Expr> => Box::new(ast::Action::VarDecl{
        name: s, var_type: t, init_value: e  }),
    <CondAction>,
    <WhileLoop>,
    <ForLoop>,
    "adopt" <b:SYMBOL> "(" <args:ArgumentList> ")" => Box::new(ast::Action::AdoptAction{ id: b, arguments: args}),
    "exit" => Box::new(ast::Action::ExitAction)
}


ReceiveAction: Box<ast::Action> = {
    "rec" <ch:ChannelExpr> "(" <s:SYMBOL> ")" "do"
        <recs:ReceiveClause+>
        <else_acts:("else" <Action+>)?>
    "end" => Box::new(ast::Action::Recv{ source: ch, clauses: recs, else_clause: else_acts})
}

ReceiveClause: ast::ReceiveClause = {
    "on" <p:MessagePattern> "do" <acts:Action+> "end" => ast::ReceiveClause{pattern: p, actions: acts}
}

MessagePattern: ast::MessagePattern = {
    <i:Identifier> "(" <ss:Comma<SYMBOL>> ")" => ast::MessagePattern::TuplePattern(ss),
    <i:Identifier> "{" <ss:Comma<NameValue>> "}" => ast::MessagePattern::StructPattern(ss)
}

NameValue: (ast::Symbol, ast::Symbol) = {
    <n:SYMBOL> ":" <v:SYMBOL> => (n, v)
}

CondAction: Box<ast::Action> = {
    "cond" <cs:Bar<CondClause>>
    <else_acts:("else" <Action+>)?>
    "end" ( "@cond")? => Box::new(ast::Action::CondAction{
        clauses: cs, else_clause: else_acts
    })
}

CondClause: (ast::Expr, Vec<Box<ast::Action>>) = {
    <e: Expr> "then" <acts:Action+> "end" =>
        (e, acts)
}


WhileLoop: Box<ast::Action> = {
    "while" <e:Expr> "do" <acts:Action+> "end" ("@while")? =>
        Box::new(ast::Action::WhileAction{ cond: e, body: acts})
}

ForLoop: Box<ast::Action> = {
    "for" <idx:SYMBOL> ":" <range:Expr> "do" <acts:Action+> "end" ("@for")? =>
    Box::new(ast::Action::ForAction{ id: idx, range: range, body: acts})
}

//////////// Types

BoxedTypeArgsBlock: Vec<Box<ast::Type>> = {
    <("[" <Comma<Boxed<Type>>> "]")>
}


Type: ast::Type = {
    <tas:BoxedTypeArgsBlock?>  <id:Identifier> =>
        ast::Type::Named{ base_type_name: id,
                          type_arguments: tas},

    "chan" <d:Direction> <t:Type> => ast::Type::ChannelType(Box::new(t), d),
    <tv:TYPEVAR> => ast::Type::Var(ast::TypeVar(tv))
}


//////////// Expressions
BoxedExpr: Box<ast::Expr> = {
    Boxed<Expr>

}
BoxedExprList: Vec<Box<ast::Expr>> = {
    <Comma<Boxed<Expr>>>,
    => Vec::new()
 }


Expr: ast::Expr = {
    #[precedence(level="0")]
    <ChannelExpr>,
    "create" <t:Type> "(" <exprs:BoxedExprList> ")" => ast::Expr::CreateQuarkExpr{quark_type: t, args: exprs },
    <BosonValueExpr>,
    <s:STRLIT> => ast::Expr::LitStringExpr(s),
    <i:INTLIT> => ast::Expr::LitIntExpr(i),
    <f:FLOATLIT> => ast::Expr::LitFloatExpr(f),
    <c:CHARLIT> => ast::Expr::LitCharExpr(c),
    "(" <Expr> ")",
    <lv:SYMBOL> => ast::Expr::VariableExpr(lv),
    #[precedence(level="1")] #[assoc(side="left")]
    "-" <e:Boxed<Expr>> => ast::Expr::OperatorExpr{ op: ast::Operator::OpMinus, args: vec![e] },
    "not" <e:Boxed<Expr>> => ast::Expr::OperatorExpr{ op: ast::Operator::OpNot, args: vec![e] },
    #[precedence(level="2")] #[assoc(side="left")]
    <l:Boxed<Expr>> <m:MultOp> <r:Boxed<Expr>> => ast::Expr::OperatorExpr{ op: m, args: vec![l, r] },
    #[precedence(level="3")] #[assoc(side="left")]
    <l:Boxed<Expr>> <m:AddOp> <r:Boxed<Expr>> => ast::Expr::OperatorExpr{ op: m, args: vec![l, r] },
    #[precedence(level="4")] #[assoc(side="left")]
    <l:Boxed<Expr>> <m:CompareOp> <r:Boxed<Expr>> => ast::Expr::OperatorExpr{ op: m, args: vec![l, r] },
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Boxed<Expr>> <m:LogicOp> <r:Boxed<Expr>> => ast::Expr::OperatorExpr{ op: m, args: vec![l, r] }


}

ChannelExpr: ast::Expr = {
  "<<" <id:(<Identifier> ".")?>  <s:SYMBOL> ">>" => ast::Expr::ChannelExpr(id, s)
}

MultOp: ast::Operator = {
     <"*"> => ast::Operator::OpTimes,
     <"/"> => ast::Operator::OpDiv,
     <"%"> => ast::Operator::OpMod
}

AddOp: ast::Operator = {
     <"+"> => ast::Operator::OpPlus,
     <"-"> => ast::Operator::OpMinus
}

CompareOp: ast::Operator = {
      <">"> => ast::Operator::OpGt,
      <"<"> => ast::Operator::OpLt,
      <">="> => ast::Operator::OpGe,
      <"<="> => ast::Operator::OpLe,
      <"=="> => ast::Operator::OpEq,
      <"!="> => ast::Operator::OpNotEq
}

LogicOp: ast::Operator = {
    <"and"> => ast::Operator::OpAnd,
    <"or"> => ast::Operator::OpOr
}

BosonValueExpr: ast::Expr = {
   <type_args:BoxedTypeArgsBlock?> <boson_name:Identifier>
    <args:BosonArgs> => {
        match args {
            Left(a) => ast::Expr::BosonTupleExpr{tuple_type: boson_name,
                type_args: type_args,
                args: a},
            Right(b) => ast::Expr::BosonStructExpr{
                boson_type: boson_name,
                type_args: type_args,
                args: b
            }
        }
    }
}

BosonNameBinding: (ast::Symbol, Box<ast::Expr>) = {
    <name:SYMBOL> ":" <e:Boxed<Expr>> => (name, e)
}

BosonArgs: Either<Option<Vec<Box<ast::Expr>>>, Vec<(ast::Symbol, Box<ast::Expr>)>> = {
    "(" <args:Comma<Boxed<Expr>>?> ")" => Either::Left(args),
    "{" <args:Comma<BosonNameBinding>>  "}" => Either::Right(args)
}

LValue: ast::LValue = {
    <id:Identifier> => ast::LValue::Ident(id)
}

extern {
    type Location = usize;
    type Error = LexicalError;
    enum Token {
        "," => Token::Comma,
        "|" => Token::Bar,
        ":" => Token::Colon,
        "::" => Token::ColonColon,
        ":=" => Token::ColonEq,
        "/" => Token::Div,
        "." => Token::Dot,
        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        "!=" => Token::NotEqual,
        ">=" => Token::GE,
        ">" => Token::GT,
        "<=" => Token::LE,
        "<" => Token::LT,
        "-" => Token::Minus,
        "%" => Token::Mod,
        "+" => Token::Plus,
        "*" => Token::Times,

        "(" => Token::LParen,
        ")"=> Token::RParen,
        "[" => Token::LBrack,
        "]" => Token::RBrack,
        "{" => Token::LCurly,
        "}" => Token::RCurly,
        "<<" => Token::LCH,
        ">>" => Token::RCH,

        "@behavior" => Token::AtBehavior,
        "@boson" => Token::AtBoson,
        "@cond" => Token::AtCond,
        "@flavor" => Token::AtFlavor,
        "@for" => Token::AtFor,
        "@quark" => Token::AtQuark,
        "@while" => Token::AtWhile,

        "and" => Token::And,
        "adopt" => Token::Adopt,
        "behavior" => Token::Behavior,
        "boson" => Token::Boson,
        "Both" => Token::Both,
        "chan" => Token::Chan,
        "cond" => Token::Cond,
        "create" => Token::Create,
        "do" => Token::Do,
        "end" => Token::End,
        "exit" => Token::Exit,
        "else" => Token::Else,
        "flavor" => Token::Flavor,
        "for" => Token::For,
        "hadron" => Token::Hadron,
        "In" => Token::In,
        "is" => Token::Is,
        "not" => Token::Not,
        "on" => Token::On,
        "or" => Token::Or,
        "Out" => Token::Out,
        "par" => Token::Par,
        "provides" => Token::Provides,
        "quark" => Token::Quark,
        "rec" => Token::Rec,
        "select" => Token::Select,
        "send" => Token::Send,
        "seq" => Token::Seq,
        "slot" => Token::Slot,
        "then" => Token::Then,
        "use" => Token::Use,
        "var" => Token::Var,
        "while" => Token::While,

        SYMBOL => Token::Symbol(<ast::Symbol>),
        TYPEVAR => Token::TypeVar(<String>),
        STRLIT => Token::StrLit(<String>),
        INTLIT => Token::IntLit(<i64>),
        FLOATLIT => Token::FloatLit(<f64>),
        CHARLIT => Token::CharLit(<char>),
    }
}














